package com.scaler.dsa.recursion.backtracking;

import java.util.ArrayList;
import java.util.List;

/**
 * 
 * @author Divyang
 * Generating all permutations N distinct elements
 * 
 */
public class GenerateNElements {

	public void gen(int[] input, int index, List<List<Integer>> ans){
		
		if(index == input.length){
		
			//copy ds to ans
			List<Integer> ds = new ArrayList();
			for(int i=0; i<input.length; i++){
				ds.add(input[i]);
			}
			ans.add(new ArrayList<>(ds));
			return;
		}
		
		for(int i=0; i<=r; i++){
			swap(input, l, i);
			gen(input, l+1, r, ans);
			swap(input, l, i);
		}
	}
	
	public void swap(int a[], int prev, int next){
		int tmp = a[prev];
		a[prev] = a[next];
		a[next] = tmp;
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		int[] input = new int[]{1,2,3};
		
		List<List<Integer>> ans = new ArrayList<>();
		
		new GenerateNElements().gen(input.clone(), 0, ans);
	
		//(1,2,3) (1,3,2) (2,1,3) (2,3,1) (3,1,2) (3,2,1)
		System.out.println(ans);
		
		System.out.println("############################");

		
        input = new int[]{1,2,3,4};
        ans = new ArrayList<>();
		
		new GenerateNElements().gen(input.clone(), 0, ans);
	
		//(1,2,3) (1,3,2) (2,1,3) (2,3,1) (3,1,2) (3,2,1)
		System.out.println(ans);
	}

}
