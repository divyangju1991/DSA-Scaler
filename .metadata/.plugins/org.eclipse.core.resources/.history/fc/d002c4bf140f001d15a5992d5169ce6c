package com.scaler.dsa.recursion.backtracking;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GeneratePairWithDuplicate {

	class Fill {
		public int count;
		public int val; 
	}
	
	public void gen(int idx, List<Fill> fills, List<List<Integer>> ans){
		
		if(idx == fills.size()){
			
			List<Integer> sub = new ArrayList(); 
			
			for(int i=0; i<a.length; i++){
				
				if(a[i] == 1){
					sub.add(input[i]);
				}
			}
			
			ans.add(sub);
			return;
		}
		
		for(int i=0; i<fills.get(0).count; i++){
			
		}
		/*
		a[idx] = 0;
		gen(a, idx+1, input, ans);
		a[idx] = 1;
		gen(a, idx+1, input, ans);
		*/
		
	}
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] input = new int[]{1,1,2,2};
		
		List<List<Integer>> ans = new ArrayList();
		List<Fill> fills = new ArrayList();
		
		Map<Integer, Integer> map = new HashMap<>();
		
		for(int i=0; i<input.length; i++){
			
			if(map.get(input[i]) != null){
				map.put(map.get(input[i]), map.get(input[i]) + 1);
			} else {
				map.put(map.get(input[i]), 1);
			}
		}
		
		for(Map.Entry<Integer, Integer> entry : map.entrySet()){
			
			Fill fill = new GeneratePairWithDuplicate.Fill();
			fill.val = entry.getKey();
			fill.count = entry.getValue();
			
			fills.add(fill);
		}
		
		new GeneratePairWithDuplicate().gen(0, fills, ans);
		
		System.out.println(ans);
	}

}
