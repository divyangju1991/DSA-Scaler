package com.scaler.dsa.recursion.backtracking;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GeneratePairWithDuplicate {

	class Fill {
		public int count;
		public int val; 
	}
	
	public void gen(int idx, Fill[] fill, List<List<Integer>> ans){
		
		if(idx == a.length){
			
			List<Integer> sub = new ArrayList(); 
			
			for(int i=0; i<a.length; i++){
				
				if(a[i] == 1){
					sub.add(input[i]);
				}
			}
			
			ans.add(sub);
			return;
		}
		
		for(){
			
		}
		/*
		a[idx] = 0;
		gen(a, idx+1, input, ans);
		a[idx] = 1;
		gen(a, idx+1, input, ans);
		*/
		
	}
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] input = new int[]{1,1,2,2};
		Fill[] fill = new Fill[input.length];
		
		List<List<Integer>> ans = new ArrayList();
		
		Map<Integer, Integer> map = new HashMap<>();
		
		for(int i=0; i<input.length; i++){
			
			if(map.get(input[i]) != null){
				map.put(map.get(input[i]), map.get(input[i])++);
			} else {
				
			}
		}
		
		new GeneratePairWithDuplicate().gen(0, fill, ans);
		
		System.out.println(ans);
	}

}
